try{self["workbox:core:7.0.0"]&&_()}catch{}const q={"invalid-value":({paramName:r,validValueDescription:e,value:t})=>{if(!r||!e)throw new Error("Unexpected input to 'invalid-value' error.");return`The '${r}' parameter was given a value with an unexpected value. ${e} Received a value of ${JSON.stringify(t)}.`},"not-an-array":({moduleName:r,className:e,funcName:t,paramName:s})=>{if(!r||!e||!t||!s)throw new Error("Unexpected input to 'not-an-array' error.");return`The parameter '${s}' passed into '${r}.${e}.${t}()' must be an array.`},"incorrect-type":({expectedType:r,paramName:e,moduleName:t,className:s,funcName:a})=>{if(!r||!e||!t||!a)throw new Error("Unexpected input to 'incorrect-type' error.");const n=s?`${s}.`:"";return`The parameter '${e}' passed into '${t}.${n}${a}()' must be of type ${r}.`},"incorrect-class":({expectedClassName:r,paramName:e,moduleName:t,className:s,funcName:a,isReturnValueProblem:n})=>{if(!r||!t||!a)throw new Error("Unexpected input to 'incorrect-class' error.");const o=s?`${s}.`:"";return n?`The return value from '${t}.${o}${a}()' must be an instance of class ${r}.`:`The parameter '${e}' passed into '${t}.${o}${a}()' must be an instance of class ${r}.`},"missing-a-method":({expectedMethod:r,paramName:e,moduleName:t,className:s,funcName:a})=>{if(!r||!e||!t||!s||!a)throw new Error("Unexpected input to 'missing-a-method' error.");return`${t}.${s}.${a}() expected the '${e}' parameter to expose a '${r}' method.`},"add-to-cache-list-unexpected-type":({entry:r})=>`An unexpected entry was passed to 'workbox-precaching.PrecacheController.addToCacheList()' The entry '${JSON.stringify(r)}' isn't supported. You must supply an array of strings with one or more characters, objects with a url property or Request objects.`,"add-to-cache-list-conflicting-entries":({firstEntry:r,secondEntry:e})=>{if(!r||!e)throw new Error("Unexpected input to 'add-to-cache-list-duplicate-entries' error.");return`Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL ${r} but different revision details. Workbox is unable to cache and version the asset correctly. Please remove one of the entries.`},"plugin-error-request-will-fetch":({thrownErrorMessage:r})=>{if(!r)throw new Error("Unexpected input to 'plugin-error-request-will-fetch', error.");return`An error was thrown by a plugins 'requestWillFetch()' method. The thrown error message was: '${r}'.`},"invalid-cache-name":({cacheNameId:r,value:e})=>{if(!r)throw new Error("Expected a 'cacheNameId' for error 'invalid-cache-name'");return`You must provide a name containing at least one character for setCacheDetails({${r}: '...'}). Received a value of '${JSON.stringify(e)}'`},"unregister-route-but-not-found-with-method":({method:r})=>{if(!r)throw new Error("Unexpected input to 'unregister-route-but-not-found-with-method' error.");return`The route you're trying to unregister was not  previously registered for the method type '${r}'.`},"unregister-route-route-not-registered":()=>"The route you're trying to unregister was not previously registered.","queue-replay-failed":({name:r})=>`Replaying the background sync queue '${r}' failed.`,"duplicate-queue-name":({name:r})=>`The Queue name '${r}' is already being used. All instances of backgroundSync.Queue must be given unique names.`,"expired-test-without-max-age":({methodName:r,paramName:e})=>`The '${r}()' method can only be used when the '${e}' is used in the constructor.`,"unsupported-route-type":({moduleName:r,className:e,funcName:t,paramName:s})=>`The supplied '${s}' parameter was an unsupported type. Please check the docs for ${r}.${e}.${t} for valid input types.`,"not-array-of-class":({value:r,expectedClass:e,moduleName:t,className:s,funcName:a,paramName:n})=>`The supplied '${n}' parameter must be an array of '${e}' objects. Received '${JSON.stringify(r)},'. Please check the call to ${t}.${s}.${a}() to fix the issue.`,"max-entries-or-age-required":({moduleName:r,className:e,funcName:t})=>`You must define either config.maxEntries or config.maxAgeSecondsin ${r}.${e}.${t}`,"statuses-or-headers-required":({moduleName:r,className:e,funcName:t})=>`You must define either config.statuses or config.headersin ${r}.${e}.${t}`,"invalid-string":({moduleName:r,funcName:e,paramName:t})=>{if(!t||!r||!e)throw new Error("Unexpected input to 'invalid-string' error.");return`When using strings, the '${t}' parameter must start with 'http' (for cross-origin matches) or '/' (for same-origin matches). Please see the docs for ${r}.${e}() for more info.`},"channel-name-required":()=>"You must provide a channelName to construct a BroadcastCacheUpdate instance.","invalid-responses-are-same-args":()=>"The arguments passed into responsesAreSame() appear to be invalid. Please ensure valid Responses are used.","expire-custom-caches-only":()=>"You must provide a 'cacheName' property when using the expiration plugin with a runtime caching strategy.","unit-must-be-bytes":({normalizedRangeHeader:r})=>{if(!r)throw new Error("Unexpected input to 'unit-must-be-bytes' error.");return`The 'unit' portion of the Range header must be set to 'bytes'. The Range header provided was "${r}"`},"single-range-only":({normalizedRangeHeader:r})=>{if(!r)throw new Error("Unexpected input to 'single-range-only' error.");return`Multiple ranges are not supported. Please use a  single start value, and optional end value. The Range header provided was "${r}"`},"invalid-range-values":({normalizedRangeHeader:r})=>{if(!r)throw new Error("Unexpected input to 'invalid-range-values' error.");return`The Range header is missing both start and end values. At least one of those values is needed. The Range header provided was "${r}"`},"no-range-header":()=>"No Range header was found in the Request provided.","range-not-satisfiable":({size:r,start:e,end:t})=>`The start (${e}) and end (${t}) values in the Range are not satisfiable by the cached response, which is ${r} bytes.`,"attempt-to-cache-non-get-request":({url:r,method:e})=>`Unable to cache '${r}' because it is a '${e}' request and only 'GET' requests can be cached.`,"cache-put-with-no-response":({url:r})=>`There was an attempt to cache '${r}' but the response was not defined.`,"no-response":({url:r,error:e})=>{let t=`The strategy could not generate a response for '${r}'.`;return e&&(t+=` The underlying error is ${e}.`),t},"bad-precaching-response":({url:r,status:e})=>`The precaching request for '${r}' failed`+(e?` with an HTTP status of ${e}.`:"."),"non-precached-url":({url:r})=>`createHandlerBoundToURL('${r}') was called, but that URL is not precached. Please pass in a URL that is precached instead.`,"add-to-cache-list-conflicting-integrities":({url:r})=>`Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL ${r} with different integrity values. Please remove one of them.`,"missing-precache-entry":({cacheName:r,url:e})=>`Unable to find a precached response in ${r} for ${e}.`,"cross-origin-copy-response":({origin:r})=>`workbox-core.copyResponse() can only be used with same-origin responses. It was passed a response with origin ${r}.`,"opaque-streams-source":({type:r})=>{const e=`One of the workbox-streams sources resulted in an '${r}' response.`;return r==="opaqueredirect"?`${e} Please do not use a navigation request that results in a redirect as a source.`:`${e} Please ensure your sources are CORS-enabled.`}},A=(r,e={})=>{const t=q[r];if(!t)throw new Error(`Unable to find message for code '${r}'.`);return t(e)},I=A;class h extends Error{constructor(e,t){const s=I(e,t);super(s),this.name=e,this.details=t}}const W=(r,e)=>{if(!Array.isArray(r))throw new h("not-an-array",e)},D=(r,e,t)=>{if(typeof r[e]!=="function")throw t.expectedMethod=e,new h("missing-a-method",t)},M=(r,e,t)=>{if(typeof r!==e)throw t.expectedType=e,new h("incorrect-type",t)},F=(r,e,t)=>{if(!(r instanceof e))throw t.expectedClassName=e.name,new h("incorrect-class",t)},j=(r,e,t)=>{if(!e.includes(r))throw t.validValueDescription=`Valid values are ${JSON.stringify(e)}.`,new h("invalid-value",t)},H=(r,e,t)=>{const s=new h("not-array-of-class",t);if(!Array.isArray(r))throw s;for(const a of r)if(!(a instanceof e))throw s},d={hasMethod:D,isArray:W,isInstance:F,isOneOf:j,isType:M,isArrayOfClass:H},g={googleAnalytics:"googleAnalytics",precache:"precache-v2",prefix:"workbox",runtime:"runtime",suffix:typeof registration<"u"?registration.scope:""},U=r=>[g.prefix,r,g.suffix].filter(e=>e&&e.length>0).join("-"),B=r=>{for(const e of Object.keys(g))r(e)},T={updateDetails:r=>{B(e=>{typeof r[e]=="string"&&(g[e]=r[e])})},getGoogleAnalyticsName:r=>r||U(g.googleAnalytics),getPrecacheName:r=>r||U(g.precache),getPrefix:()=>g.prefix,getRuntimeName:r=>r||U(g.runtime),getSuffix:()=>g.suffix},i=(()=>{"__WB_DISABLE_DEV_LOGS"in globalThis||(self.__WB_DISABLE_DEV_LOGS=!1);let r=!1;const e={debug:"#7f8c8d",log:"#2ecc71",warn:"#f39c12",error:"#c0392b",groupCollapsed:"#3498db",groupEnd:null},t=function(n,o){if(self.__WB_DISABLE_DEV_LOGS)return;if(n==="groupCollapsed"&&/^((?!chrome|android).)*safari/i.test(navigator.userAgent)){console[n](...o);return}const c=[`background: ${e[n]}`,"border-radius: 0.5em","color: white","font-weight: bold","padding: 2px 0.5em"],l=r?[]:["%cworkbox",c.join(";")];console[n](...l,...o),n==="groupCollapsed"&&(r=!0),n==="groupEnd"&&(r=!1)},s={},a=Object.keys(e);for(const n of a){const o=n;s[o]=(...c)=>{t(o,c)}}return s})();function E(r,e){const t=e();return r.waitUntil(t),t}try{self["workbox:precaching:7.0.0"]&&_()}catch{}const G="__WB_REVISION__";function V(r){if(!r)throw new h("add-to-cache-list-unexpected-type",{entry:r});if(typeof r=="string"){const n=new URL(r,location.href);return{cacheKey:n.href,url:n.href}}const{revision:e,url:t}=r;if(!t)throw new h("add-to-cache-list-unexpected-type",{entry:r});if(!e){const n=new URL(t,location.href);return{cacheKey:n.href,url:n.href}}const s=new URL(t,location.href),a=new URL(t,location.href);return s.searchParams.set(G,e),{cacheKey:s.href,url:a.href}}class Y{constructor(){this.updatedURLs=[],this.notUpdatedURLs=[],this.handlerWillStart=async({request:e,state:t})=>{t&&(t.originalRequest=e)},this.cachedResponseWillBeUsed=async({event:e,state:t,cachedResponse:s})=>{if(e.type==="install"&&t&&t.originalRequest&&t.originalRequest instanceof Request){const a=t.originalRequest.url;s?this.notUpdatedURLs.push(a):this.updatedURLs.push(a)}return s}}}class J{constructor({precacheController:e}){this.cacheKeyWillBeUsed=async({request:t,params:s})=>{const a=(s==null?void 0:s.cacheKey)||this._precacheController.getCacheKeyForURL(t.url);return a?new Request(a,{headers:t.headers}):t},this._precacheController=e}}const Q=(r,e)=>{i.groupCollapsed(r);for(const t of e)i.log(t);i.groupEnd()};function X(r){const e=r.length;e>0&&(i.groupCollapsed(`During precaching cleanup, ${e} cached request${e===1?" was":"s were"} deleted.`),Q("Deleted Cache Requests",r),i.groupEnd())}function L(r,e){if(e.length!==0){i.groupCollapsed(r);for(const t of e)i.log(t);i.groupEnd()}}function Z(r,e){const t=r.length,s=e.length;if(t||s){let a=`Precaching ${t} file${t===1?"":"s"}.`;s>0&&(a+=` ${s} file${s===1?" is":"s are"} already cached.`),i.groupCollapsed(a),L("View newly precached URLs.",r),L("View previously precached URLs.",e),i.groupEnd()}}let R;function z(){if(R===void 0){const r=new Response("");if("body"in r)try{new Response(r.body),R=!0}catch{R=!1}R=!1}return R}async function ee(r,e){let t=null;if(r.url&&(t=new URL(r.url).origin),t!==self.location.origin)throw new h("cross-origin-copy-response",{origin:t});const s=r.clone(),a={headers:new Headers(s.headers),status:s.status,statusText:s.statusText},n=e?e(a):a,o=z()?s.body:await s.blob();return new Response(o,n)}const u=r=>new URL(String(r),location.href).href.replace(new RegExp(`^${location.origin}`),"");function P(r,e){const t=new URL(r);for(const s of e)t.searchParams.delete(s);return t.href}async function te(r,e,t,s){const a=P(e.url,t);if(e.url===a)return r.match(e,s);const n=Object.assign(Object.assign({},s),{ignoreSearch:!0}),o=await r.keys(e,n);for(const c of o){const l=P(c.url,t);if(a===l)return r.match(c,s)}}class re{constructor(){this.promise=new Promise((e,t)=>{this.resolve=e,this.reject=t})}}const K=new Set;async function se(){i.log(`About to run ${K.size} callbacks to clean up caches.`);for(const r of K)await r(),i.log(r,"is complete.");i.log("Finished running callbacks.")}function ae(r){return new Promise(e=>setTimeout(e,r))}try{self["workbox:strategies:7.0.0"]&&_()}catch{}function $(r){return typeof r=="string"?new Request(r):r}class ne{constructor(e,t){this._cacheKeys={},d.isInstance(t.event,ExtendableEvent,{moduleName:"workbox-strategies",className:"StrategyHandler",funcName:"constructor",paramName:"options.event"}),Object.assign(this,t),this.event=t.event,this._strategy=e,this._handlerDeferred=new re,this._extendLifetimePromises=[],this._plugins=[...e.plugins],this._pluginStateMap=new Map;for(const s of this._plugins)this._pluginStateMap.set(s,{});this.event.waitUntil(this._handlerDeferred.promise)}async fetch(e){const{event:t}=this;let s=$(e);if(s.mode==="navigate"&&t instanceof FetchEvent&&t.preloadResponse){const o=await t.preloadResponse;if(o)return i.log(`Using a preloaded navigation response for '${u(s.url)}'`),o}const a=this.hasCallback("fetchDidFail")?s.clone():null;try{for(const o of this.iterateCallbacks("requestWillFetch"))s=await o({request:s.clone(),event:t})}catch(o){if(o instanceof Error)throw new h("plugin-error-request-will-fetch",{thrownErrorMessage:o.message})}const n=s.clone();try{let o;o=await fetch(s,s.mode==="navigate"?void 0:this._strategy.fetchOptions),i.debug(`Network request for '${u(s.url)}' returned a response with status '${o.status}'.`);for(const c of this.iterateCallbacks("fetchDidSucceed"))o=await c({event:t,request:n,response:o});return o}catch(o){throw i.log(`Network request for '${u(s.url)}' threw an error.`,o),a&&await this.runCallbacks("fetchDidFail",{error:o,event:t,originalRequest:a.clone(),request:n.clone()}),o}}async fetchAndCachePut(e){const t=await this.fetch(e),s=t.clone();return this.waitUntil(this.cachePut(e,s)),t}async cacheMatch(e){const t=$(e);let s;const{cacheName:a,matchOptions:n}=this._strategy,o=await this.getCacheKey(t,"read"),c=Object.assign(Object.assign({},n),{cacheName:a});s=await caches.match(o,c),s?i.debug(`Found a cached response in '${a}'.`):i.debug(`No cached response found in '${a}'.`);for(const l of this.iterateCallbacks("cachedResponseWillBeUsed"))s=await l({cacheName:a,matchOptions:n,cachedResponse:s,request:o,event:this.event})||void 0;return s}async cachePut(e,t){const s=$(e);await ae(0);const a=await this.getCacheKey(s,"write");{if(a.method&&a.method!=="GET")throw new h("attempt-to-cache-non-get-request",{url:u(a.url),method:a.method});const f=t.headers.get("Vary");f&&i.debug(`The response for ${u(a.url)} has a 'Vary: ${f}' header. Consider setting the {ignoreVary: true} option on your strategy to ensure cache matching and deletion works as expected.`)}if(!t)throw i.error(`Cannot cache non-existent response for '${u(a.url)}'.`),new h("cache-put-with-no-response",{url:u(a.url)});const n=await this._ensureResponseSafeToCache(t);if(!n)return i.debug(`Response '${u(a.url)}' will not be cached.`,n),!1;const{cacheName:o,matchOptions:c}=this._strategy,l=await self.caches.open(o),w=this.hasCallback("cacheDidUpdate"),m=w?await te(l,a.clone(),["__WB_REVISION__"],c):null;i.debug(`Updating the '${o}' cache with a new Response for ${u(a.url)}.`);try{await l.put(a,w?n.clone():n)}catch(f){if(f instanceof Error)throw f.name==="QuotaExceededError"&&await se(),f}for(const f of this.iterateCallbacks("cacheDidUpdate"))await f({cacheName:o,oldResponse:m,newResponse:n.clone(),request:a,event:this.event});return!0}async getCacheKey(e,t){const s=`${e.url} | ${t}`;if(!this._cacheKeys[s]){let a=e;for(const n of this.iterateCallbacks("cacheKeyWillBeUsed"))a=$(await n({mode:t,request:a,event:this.event,params:this.params}));this._cacheKeys[s]=a}return this._cacheKeys[s]}hasCallback(e){for(const t of this._strategy.plugins)if(e in t)return!0;return!1}async runCallbacks(e,t){for(const s of this.iterateCallbacks(e))await s(t)}*iterateCallbacks(e){for(const t of this._strategy.plugins)if(typeof t[e]=="function"){const s=this._pluginStateMap.get(t);yield n=>{const o=Object.assign(Object.assign({},n),{state:s});return t[e](o)}}}waitUntil(e){return this._extendLifetimePromises.push(e),e}async doneWaiting(){let e;for(;e=this._extendLifetimePromises.shift();)await e}destroy(){this._handlerDeferred.resolve(null)}async _ensureResponseSafeToCache(e){let t=e,s=!1;for(const a of this.iterateCallbacks("cacheWillUpdate"))if(t=await a({request:this.request,response:t,event:this.event})||void 0,s=!0,!t)break;return s||(t&&t.status!==200&&(t=void 0),t&&t.status!==200&&(t.status===0?i.warn(`The response for '${this.request.url}' is an opaque response. The caching strategy that you're using will not cache opaque responses by default.`):i.debug(`The response for '${this.request.url}' returned a status code of '${e.status}' and won't be cached as a result.`))),t}}class oe{constructor(e={}){this.cacheName=T.getRuntimeName(e.cacheName),this.plugins=e.plugins||[],this.fetchOptions=e.fetchOptions,this.matchOptions=e.matchOptions}handle(e){const[t]=this.handleAll(e);return t}handleAll(e){e instanceof FetchEvent&&(e={event:e,request:e.request});const t=e.event,s=typeof e.request=="string"?new Request(e.request):e.request,a="params"in e?e.params:void 0,n=new ne(this,{event:t,request:s,params:a}),o=this._getResponse(n,s,t),c=this._awaitComplete(o,n,s,t);return[o,c]}async _getResponse(e,t,s){await e.runCallbacks("handlerWillStart",{event:s,request:t});let a;try{if(a=await this._handle(t,e),!a||a.type==="error")throw new h("no-response",{url:t.url})}catch(n){if(n instanceof Error){for(const o of e.iterateCallbacks("handlerDidError"))if(a=await o({error:n,event:s,request:t}),a)break}if(a)i.log(`While responding to '${u(t.url)}', an ${n instanceof Error?n.toString():""} error occurred. Using a fallback response provided by a handlerDidError plugin.`);else throw n}for(const n of e.iterateCallbacks("handlerWillRespond"))a=await n({event:s,request:t,response:a});return a}async _awaitComplete(e,t,s,a){let n,o;try{n=await e}catch{}try{await t.runCallbacks("handlerDidRespond",{event:a,request:s,response:n}),await t.doneWaiting()}catch(c){c instanceof Error&&(o=c)}if(await t.runCallbacks("handlerDidComplete",{event:a,request:s,response:n,error:o}),t.destroy(),o)throw o}}class y extends oe{constructor(e={}){e.cacheName=T.getPrecacheName(e.cacheName),super(e),this._fallbackToNetwork=e.fallbackToNetwork!==!1,this.plugins.push(y.copyRedirectedCacheableResponsesPlugin)}async _handle(e,t){const s=await t.cacheMatch(e);return s||(t.event&&t.event.type==="install"?await this._handleInstall(e,t):await this._handleFetch(e,t))}async _handleFetch(e,t){let s;const a=t.params||{};if(this._fallbackToNetwork){i.warn(`The precached response for ${u(e.url)} in ${this.cacheName} was not found. Falling back to the network.`);const n=a.integrity,o=e.integrity,c=!o||o===n;s=await t.fetch(new Request(e,{integrity:e.mode!=="no-cors"?o||n:void 0})),n&&c&&e.mode!=="no-cors"&&(this._useDefaultCacheabilityPluginIfNeeded(),await t.cachePut(e,s.clone())&&i.log(`A response for ${u(e.url)} was used to "repair" the precache.`))}else throw new h("missing-precache-entry",{cacheName:this.cacheName,url:e.url});{const n=a.cacheKey||await t.getCacheKey(e,"read");i.groupCollapsed("Precaching is responding to: "+u(e.url)),i.log(`Serving the precached url: ${u(n instanceof Request?n.url:n)}`),i.groupCollapsed("View request details here."),i.log(e),i.groupEnd(),i.groupCollapsed("View response details here."),i.log(s),i.groupEnd(),i.groupEnd()}return s}async _handleInstall(e,t){this._useDefaultCacheabilityPluginIfNeeded();const s=await t.fetch(e);if(!await t.cachePut(e,s.clone()))throw new h("bad-precaching-response",{url:e.url,status:s.status});return s}_useDefaultCacheabilityPluginIfNeeded(){let e=null,t=0;for(const[s,a]of this.plugins.entries())a!==y.copyRedirectedCacheableResponsesPlugin&&(a===y.defaultPrecacheCacheabilityPlugin&&(e=s),a.cacheWillUpdate&&t++);t===0?this.plugins.push(y.defaultPrecacheCacheabilityPlugin):t>1&&e!==null&&this.plugins.splice(e,1)}}y.defaultPrecacheCacheabilityPlugin={async cacheWillUpdate({response:r}){return!r||r.status>=400?null:r}};y.copyRedirectedCacheableResponsesPlugin={async cacheWillUpdate({response:r}){return r.redirected?await ee(r):r}};class ie{constructor({cacheName:e,plugins:t=[],fallbackToNetwork:s=!0}={}){this._urlsToCacheKeys=new Map,this._urlsToCacheModes=new Map,this._cacheKeysToIntegrities=new Map,this._strategy=new y({cacheName:T.getPrecacheName(e),plugins:[...t,new J({precacheController:this})],fallbackToNetwork:s}),this.install=this.install.bind(this),this.activate=this.activate.bind(this)}get strategy(){return this._strategy}precache(e){this.addToCacheList(e),this._installAndActiveListenersAdded||(self.addEventListener("install",this.install),self.addEventListener("activate",this.activate),this._installAndActiveListenersAdded=!0)}addToCacheList(e){d.isArray(e,{moduleName:"workbox-precaching",className:"PrecacheController",funcName:"addToCacheList",paramName:"entries"});const t=[];for(const s of e){typeof s=="string"?t.push(s):s&&s.revision===void 0&&t.push(s.url);const{cacheKey:a,url:n}=V(s),o=typeof s!="string"&&s.revision?"reload":"default";if(this._urlsToCacheKeys.has(n)&&this._urlsToCacheKeys.get(n)!==a)throw new h("add-to-cache-list-conflicting-entries",{firstEntry:this._urlsToCacheKeys.get(n),secondEntry:a});if(typeof s!="string"&&s.integrity){if(this._cacheKeysToIntegrities.has(a)&&this._cacheKeysToIntegrities.get(a)!==s.integrity)throw new h("add-to-cache-list-conflicting-integrities",{url:n});this._cacheKeysToIntegrities.set(a,s.integrity)}if(this._urlsToCacheKeys.set(n,a),this._urlsToCacheModes.set(n,o),t.length>0){const c=`Workbox is precaching URLs without revision info: ${t.join(", ")}
This is generally NOT safe. Learn more at https://bit.ly/wb-precache`;i.warn(c)}}}install(e){return E(e,async()=>{const t=new Y;this.strategy.plugins.push(t);for(const[n,o]of this._urlsToCacheKeys){const c=this._cacheKeysToIntegrities.get(o),l=this._urlsToCacheModes.get(n),w=new Request(n,{integrity:c,cache:l,credentials:"same-origin"});await Promise.all(this.strategy.handleAll({params:{cacheKey:o},request:w,event:e}))}const{updatedURLs:s,notUpdatedURLs:a}=t;return Z(s,a),{updatedURLs:s,notUpdatedURLs:a}})}activate(e){return E(e,async()=>{const t=await self.caches.open(this.strategy.cacheName),s=await t.keys(),a=new Set(this._urlsToCacheKeys.values()),n=[];for(const o of s)a.has(o.url)||(await t.delete(o),n.push(o.url));return X(n),{deletedURLs:n}})}getURLsToCacheKeys(){return this._urlsToCacheKeys}getCachedURLs(){return[...this._urlsToCacheKeys.keys()]}getCacheKeyForURL(e){const t=new URL(e,location.href);return this._urlsToCacheKeys.get(t.href)}getIntegrityForCacheKey(e){return this._cacheKeysToIntegrities.get(e)}async matchPrecache(e){const t=e instanceof Request?e.url:e,s=this.getCacheKeyForURL(t);if(s)return(await self.caches.open(this.strategy.cacheName)).match(s)}createHandlerBoundToURL(e){const t=this.getCacheKeyForURL(e);if(!t)throw new h("non-precached-url",{url:e});return s=>(s.request=new Request(e),s.params=Object.assign({cacheKey:t},s.params),this.strategy.handle(s))}}let k;const x=()=>(k||(k=new ie),k);try{self["workbox:routing:7.0.0"]&&_()}catch{}const O="GET",ce=["DELETE","GET","HEAD","PATCH","POST","PUT"],v=r=>r&&typeof r=="object"?(d.hasMethod(r,"handle",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"handler"}),r):(d.isType(r,"function",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"handler"}),{handle:r});class b{constructor(e,t,s=O){d.isType(e,"function",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"match"}),s&&d.isOneOf(s,ce,{paramName:"method"}),this.handler=v(t),this.match=e,this.method=s}setCatchHandler(e){this.catchHandler=v(e)}}class le extends b{constructor(e,t,s){d.isInstance(e,RegExp,{moduleName:"workbox-routing",className:"RegExpRoute",funcName:"constructor",paramName:"pattern"});const a=({url:n})=>{const o=e.exec(n.href);if(o){if(n.origin!==location.origin&&o.index!==0){i.debug(`The regular expression '${e.toString()}' only partially matched against the cross-origin URL '${n.toString()}'. RegExpRoute's will only handle cross-origin requests if they match the entire URL.`);return}return o.slice(1)}};super(a,t,s)}}class he{constructor(){this._routes=new Map,this._defaultHandlerMap=new Map}get routes(){return this._routes}addFetchListener(){self.addEventListener("fetch",e=>{const{request:t}=e,s=this.handleRequest({request:t,event:e});s&&e.respondWith(s)})}addCacheListener(){self.addEventListener("message",e=>{if(e.data&&e.data.type==="CACHE_URLS"){const{payload:t}=e.data;i.debug("Caching URLs from the window",t.urlsToCache);const s=Promise.all(t.urlsToCache.map(a=>{typeof a=="string"&&(a=[a]);const n=new Request(...a);return this.handleRequest({request:n,event:e})}));e.waitUntil(s),e.ports&&e.ports[0]&&s.then(()=>e.ports[0].postMessage(!0))}})}handleRequest({request:e,event:t}){d.isInstance(e,Request,{moduleName:"workbox-routing",className:"Router",funcName:"handleRequest",paramName:"options.request"});const s=new URL(e.url,location.href);if(!s.protocol.startsWith("http")){i.debug("Workbox Router only supports URLs that start with 'http'.");return}const a=s.origin===location.origin,{params:n,route:o}=this.findMatchingRoute({event:t,request:e,sameOrigin:a,url:s});let c=o&&o.handler;const l=[];c&&(l.push(["Found a route to handle this request:",o]),n&&l.push(["Passing the following params to the route's handler:",n]));const w=e.method;if(!c&&this._defaultHandlerMap.has(w)&&(l.push(`Failed to find a matching route. Falling back to the default handler for ${w}.`),c=this._defaultHandlerMap.get(w)),!c){i.debug(`No route found for: ${u(s)}`);return}i.groupCollapsed(`Router is responding to: ${u(s)}`),l.forEach(p=>{Array.isArray(p)?i.log(...p):i.log(p)}),i.groupEnd();let m;try{m=c.handle({url:s,request:e,event:t,params:n})}catch(p){m=Promise.reject(p)}const f=o&&o.catchHandler;return m instanceof Promise&&(this._catchHandler||f)&&(m=m.catch(async p=>{if(f){i.groupCollapsed(`Error thrown when responding to:  ${u(s)}. Falling back to route's Catch Handler.`),i.error("Error thrown by:",o),i.error(p),i.groupEnd();try{return await f.handle({url:s,request:e,event:t,params:n})}catch(N){N instanceof Error&&(p=N)}}if(this._catchHandler)return i.groupCollapsed(`Error thrown when responding to:  ${u(s)}. Falling back to global Catch Handler.`),i.error("Error thrown by:",o),i.error(p),i.groupEnd(),this._catchHandler.handle({url:s,request:e,event:t});throw p})),m}findMatchingRoute({url:e,sameOrigin:t,request:s,event:a}){const n=this._routes.get(s.method)||[];for(const o of n){let c;const l=o.match({url:e,sameOrigin:t,request:s,event:a});if(l)return l instanceof Promise&&i.warn(`While routing ${u(e)}, an async matchCallback function was used. Please convert the following route to use a synchronous matchCallback function:`,o),c=l,(Array.isArray(c)&&c.length===0||l.constructor===Object&&Object.keys(l).length===0||typeof l=="boolean")&&(c=void 0),{route:o,params:c}}return{}}setDefaultHandler(e,t=O){this._defaultHandlerMap.set(t,v(e))}setCatchHandler(e){this._catchHandler=v(e)}registerRoute(e){d.isType(e,"object",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),d.hasMethod(e,"match",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),d.isType(e.handler,"object",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),d.hasMethod(e.handler,"handle",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route.handler"}),d.isType(e.method,"string",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route.method"}),this._routes.has(e.method)||this._routes.set(e.method,[]),this._routes.get(e.method).push(e)}unregisterRoute(e){if(!this._routes.has(e.method))throw new h("unregister-route-but-not-found-with-method",{method:e.method});const t=this._routes.get(e.method).indexOf(e);if(t>-1)this._routes.get(e.method).splice(t,1);else throw new h("unregister-route-route-not-registered")}}let C;const ue=()=>(C||(C=new he,C.addFetchListener(),C.addCacheListener()),C);function S(r,e,t){let s;if(typeof r=="string"){const n=new URL(r,location.href);{if(!(r.startsWith("/")||r.startsWith("http")))throw new h("invalid-string",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});const c=r.startsWith("http")?n.pathname:r,l="[*:?+]";new RegExp(`${l}`).exec(c)&&i.debug(`The '$capture' parameter contains an Express-style wildcard character (${l}). Strings are now always interpreted as exact matches; use a RegExp for partial or wildcard matches.`)}const o=({url:c})=>(c.pathname===n.pathname&&c.origin!==n.origin&&i.debug(`${r} only partially matches the cross-origin URL ${c.toString()}. This route will only handle cross-origin requests if they match the entire URL.`),c.href===n.href);s=new b(o,e,t)}else if(r instanceof RegExp)s=new le(r,e,t);else if(typeof r=="function")s=new b(r,e,t);else if(r instanceof b)s=r;else throw new h("unsupported-route-type",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});return ue().registerRoute(s),s}function de(r,e=[]){for(const t of[...r.searchParams.keys()])e.some(s=>s.test(t))&&r.searchParams.delete(t);return r}function*fe(r,{ignoreURLParametersMatching:e=[/^utm_/,/^fbclid$/],directoryIndex:t="index.html",cleanURLs:s=!0,urlManipulation:a}={}){const n=new URL(r,location.href);n.hash="",yield n.href;const o=de(n,e);if(yield o.href,t&&o.pathname.endsWith("/")){const c=new URL(o.href);c.pathname+=t,yield c.href}if(s){const c=new URL(o.href);c.pathname+=".html",yield c.href}if(a){const c=a({url:n});for(const l of c)yield l.href}}class pe extends b{constructor(e,t){const s=({request:a})=>{const n=e.getURLsToCacheKeys();for(const o of fe(a.url,t)){const c=n.get(o);if(c){const l=e.getIntegrityForCacheKey(c);return{cacheKey:c,integrity:l}}}i.debug("Precaching did not find a match for "+u(a.url))};super(s,e.strategy)}}function ge(r){const e=x(),t=new pe(e,r);S(t)}const we="-precache-",me=async(r,e=we)=>{const s=(await self.caches.keys()).filter(a=>a.includes(e)&&a.includes(self.registration.scope)&&a!==r);return await Promise.all(s.map(a=>self.caches.delete(a))),s};function ye(){self.addEventListener("activate",r=>{const e=T.getPrecacheName();r.waitUntil(me(e).then(t=>{t.length>0&&i.log("The following out-of-date precaches were cleaned up automatically:",t)}))})}function be(r){return x().createHandlerBoundToURL(r)}function Re(r){x().precache(r)}function Ce(r,e){Re(r),ge(e)}class $e extends b{constructor(e,{allowlist:t=[/./],denylist:s=[]}={}){d.isArrayOfClass(t,RegExp,{moduleName:"workbox-routing",className:"NavigationRoute",funcName:"constructor",paramName:"options.allowlist"}),d.isArrayOfClass(s,RegExp,{moduleName:"workbox-routing",className:"NavigationRoute",funcName:"constructor",paramName:"options.denylist"}),super(a=>this._match(a),e),this._allowlist=t,this._denylist=s}_match({url:e,request:t}){if(t&&t.mode!=="navigate")return!1;const s=e.pathname+e.search;for(const a of this._denylist)if(a.test(s))return i.log(`The navigation route ${s} is not being used, since the URL matches this denylist pattern: ${a.toString()}`),!1;return this._allowlist.some(a=>a.test(s))?(i.debug(`The navigation route ${s} is being used.`),!0):(i.log(`The navigation route ${s} is not being used, since the URL being navigated to doesn't match the allowlist.`),!1)}}self.addEventListener("message",r=>{console.log({event:r}),r.data&&r.data.type==="SKIP_WAITING"&&self.skipWaiting()});self.addEventListener("push",r=>{if(r.data){const e=r.data.json();console.log("Push Recieved..."),console.log({data:e}),self.registration.showNotification(e.title,{body:"Notified for TEST!",icon:"/notification.png"})}});Ce([{"revision":null,"url":"assets/index-CScSU5E8.js"},{"revision":null,"url":"assets/index-DiwrgTda.css"},{"revision":"73c5366c87598ca026e40b963820d197","url":"index.html"},{"revision":"1872c500de691dce40960bb85481de07","url":"registerSW.js"},{"revision":"a29a13896629c4cb1aa0e45a9b370793","url":"notification.png"},{"revision":"6c1f6dff5e599d70f4b8397171f1564c","url":"manifest.webmanifest"}]);ye();S(new $e(be("index.html")));
